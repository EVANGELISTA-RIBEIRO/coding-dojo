# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Package release

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10', '3.11']

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install -U poetry
          poetry install

#      - name: Test with pytest
#        run: poetry run pytest

      - name: Test with pytest
        run: |
          poetry run pytest

  linters:
    needs: [test]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install -U pip poetry
          poetry install

      - name: Check lint by task configuration
        run: |
          poetry run task lint

      - name: Check lint with flake8
        run: |
           # stop the build if there are Python syntax errors or undefined names
           poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
           # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
           poetry run flake8 . --count --exit-zero --max-complexity=5 --max-line-length=79 --statistics
        continue-on-error: true

      - name: Check lint with Ruff
        run: |
          poetry run ruff --format=github
        continue-on-error: true

  build:
    needs: [linters]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.x

    - name: Install dependencies
      run: |
        python -m pip install -U pip poetry
        poetry install

    - name: Generate package
      run: |
        poetry build

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      if: success()   # failure():: => contexts#job-status-check-functions
      with:
        name: build-package
        path: dist/
        if-no-files-found: error   # 'error', 'warn' or 'ignore' are also available, defaults to `warn`

    - name: Create a Release
      uses: elgohr/Github-Release-Action@v3
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        args: ${{ steps.Changelog.outputs.changelog }}
